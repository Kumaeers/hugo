[{"categories":["Terraform"],"contents":"はじめに 前からずっとInfra as a codeに興味があり、こちらの本を写経してみました！\n  実践terraform awsにおけるシステム設計とベストプラクティス  amazon.co.jp    ECS(Fargate)とCodepipelineを使って、 CI/CDのできるVueとGoのAWS環境を作ることができたので非常に良かったです。\nまた作業してて\nterraform destroy 一発でAWSの環境をお掃除できたので、コストをかけることなくAWSの学習を進められました！\nコンソールからぽちぽちやるのではなくコードで記述することで、 再現性のある環境を作れるのがインフラのコード化の大きなメリットだと感じました。\n成果物 実際にこの本を参考にして作った環境も載せておきます。\n https://github.com/Kumaeers/terraform_fargate_CI-CD  Terraformの実行環境はdockerで構築し、ローカルの環境変数にAWSのキーをexportしそれをdockerにマウントすることでaws cliを起動しています。\nTerraformのバージョンはv0.12.5です。\n書評 今まで業務などで用語でしか知らなかった、ターゲットグループやCloudWatchLogsなどについて体系的に学習することができたのがとても良かったです。\nまたずっとECSのCI/CD環境構築に興味があったので、それを体系的に学べて実装までできたのは大きかったです。\nコンソールとは違いコード化しているため、ここはどういう意味なんだろうとか思ったらそれをコメントとして記述できるのでAWSのリソースをしっかり理解しながら作れました。\n⬇︎こんな風に\n# ECSサービスは起動するタスクの数を定義でき、指定した数のタスクを維持　なんらかの理由でタスクが終了してしまった場合、自動的に新しいタスクを起動してくれる # またECSサービスはALBとの橋渡し役にもなり、インターネットからのリクエストはALBで受けそのリクエストをコンテナにフォワードさせる resource \u0026quot;aws_ecs_service\u0026quot; \u0026quot;tech-blog\u0026quot; { name = \u0026quot;tech-blog\u0026quot; cluster = aws_ecs_cluster.tech-blog.arn task_definition = aws_ecs_task_definition.tech-blog.arn # 2個以上コンテナ起動する desired_count = 2 launch_type = \u0026quot;FARGATE\u0026quot; # latestが最新ではないので明示的にする必要あり platform_version = \u0026quot;1.3.0\u0026quot; # タスク起動時のヘルスチェック猶予期間 0だとタスクの起動と終了が無限に続く可能性あり health_check_grace_period_seconds = 60 # サブネットとセキュリティグループを設定 network_configuration { assign_public_ip = false security_groups = [module.nginx_sg.security_group_id] subnets = [ aws_subnet.private_0.id, aws_subnet.private_1.id, ] } AWSのリソースについては補足として\n  みんなのAWS  amazon.co.jp    これや公式ドキュメントを読みながら進めていくと、かなり理解が進むのでオススメです。\nこの本をやればTerraformの公式ドキュメントさえあればなんでもリソースが作れる気がします！\nそれくらい良書でした。\nあとTerraformのディレクトリ構成やモジュール化についてはまだまだ改善できそうなのでやっていきたいです。\nまたこの本の続編が出たらしいのでそちらもやってみたいですね！！！！！\n https://nekopunch.hatenablog.com/entry/2020/09/11/084342  ","permalink":"https://pedantic-brattain-b2caa7.netlify.app/blog/book_review_of_terraform/","tags":null,"title":"「実践terraform awsにおけるシステム設計とベストプラクティス」をやってみた"},{"categories":["flutter"],"contents":"Flutter のサンプルコードについて ​ 今回は Flutter のインストール時に書かれているサンプルコードを用いて Flutter の基礎を解説していきます。 サンプルコードには Flutter の基礎が詰まっているため、Flutter 初心者の方はまずこのコードを理解することから始めるとよいかと思います。 ​\nWidget（ウィジェット）とは ​ Flutter に登場する専門用語はいくつかありますが、一番大切な Widget という言葉についてコードを見る前にその意味を知っておきましょう。 ​ Widget とは Flutter の基本構成要素です。Flutter で作られる画面の１つ１つの要素はすべて Widget でできています。例えば、テキストを表示する Widget、アイコンを表示する Widget、要素を横並びに表示する Widget などといった感じです。 ​ この Widget を組み合わせることで Flutter の画面が構成されています。 ​\nサンプルコード解説 ​ サンプルコードを添付します（見やすくするためにコメント行は省いています） ​\nimport 'package:flutter/material.Flutter'; ​ void main() =\u0026gt; runApp(MyApp()); ​ class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: 'Flutter Demo', theme: ThemeData( primarySwatch: Colors.blue, ), home: MyHomePage(title: 'Flutter Demo Home Page'), ); } } ​ class MyHomePage extends StatefulWidget { MyHomePage({Key key, this.title}) : super(key: key); final String title; ​ @override _MyHomePageState createState() =\u0026gt; _MyHomePageState(); } ​ class _MyHomePageState extends State\u0026lt;MyHomePage\u0026gt; { int _counter = 0; ​ void _incrementCounter() { setState(() { _counter++; }); } ​ @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(widget.title), ), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: \u0026lt;Widget\u0026gt;[ Text( 'You have pushed the button this many times:', ), Text( '$_counter', style: Theme.of(context).textTheme.display1, ), ], ), ), floatingActionButton: FloatingActionButton( onPressed: _incrementCounter, tooltip: 'Increment', child: Icon(Icons.add), ), ); } } ​ ​ それではコードを解説します。 ​\nmain 関数 ​\nvoid main() =\u0026gt; runApp(MyApp()); ​ Flutter アプリを実行するとまず呼ばれるのがこの関数です。この関数によって MyApp クラスの内容が実行されます。 ​\nMyApp クラス ​\nclass MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: 'Flutter Demo', theme: ThemeData( primarySwatch: Colors.blue, ), home: MyHomePage(title: 'Flutter Demo Home Page'), ); } } ​ main 関数から呼ばれたクラスです。ここで指定しているのはアプリのタイトル（title:）やアプリのテーマカラー（theme:）などアプリの基本となる情報です。ここはまだアプリの具体的な UI 表示には関わってきていません。基本設定のためのクラスだと思っていただければ大丈夫ですね。 ​ 具体的な画面の表示はホームプロパティ（home:）の MyHomePage クラス以降を見ていきます。 ​\nMyHomePage クラスと_MyHomePageState クラス ​\nclass MyHomePage extends StatefulWidget { MyHomePage({Key key, this.title}) : super(key: key); final String title; ​ @override _MyHomePageState createState() =\u0026gt; _MyHomePageState(); } ​ class _MyHomePageState extends State\u0026lt;MyHomePage\u0026gt; { int _counter = 0; ​ void _incrementCounter() { setState(() { _counter++; }); } ​ @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(widget.title), ), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: \u0026lt;Widget\u0026gt;[ Text( 'You have pushed the button this many times:', ), Text( '$_counter', style: Theme.of(context).textTheme.display1, ), ], ), ), floatingActionButton: FloatingActionButton( onPressed: _incrementCounter, tooltip: 'Increment', child: Icon(Icons.add), ), ); } } ​ 構成としては MyHomePage クラス内の createState()関数で_MyHomePageState クラスを呼んでいる形になっているかと思います。そして_MyHomePageState 内のビルド関数で初期画面の UI を構成しています。 ​ ここで Widget という言葉の意味を再度思い出してください。 例えばこれはテキストを表示するウィジェットです。中に表示したいテキストを書くだけで文字を表示してくれます。 ​\nText( 'You have pushed the button this many times:', ), ​ これはフローティングアクションボタンを表示するウィジェットです。Twitter で投稿を作成するときに押下する右下にあるボタンのことですね。 ​ これは先ほどと異なり３つオプションがあります。onPressed にはボタンが押下されたときの挙動を書きます。tooltip にはマウスオーバーしたときに表示される言葉を書きます。child にはアイコンのデザインを書きます。今回は数字をインクリメントしたいのでプラスボタンのデザインが採用されています。 ​\nFloatingActionButton( onPressed: _incrementCounter, tooltip: 'Increment', child: Icon(Icons.add), ), ​ このように Flutter にはさまざまな Widget があり、Widget を組み合わせて UI を作成していきます。 ​ 構成がわかったところで実際にカウントアップのボタンを押下した時にどのような仕組みでアプリが動くのかを見ていきましょう。 ​ まず、カウントアップのボタンが押下されると、FloatingActionButton ウィジェットの onPressed オプションの_incrementCounter メソッドが実行されます。そうすることで_counter という変数が１ずつインクリメントされていくわけですね。 ​\nint _counter = 0; ​ floatingActionButton: FloatingActionButton( onPressed: _incrementCounter, ​ void _incrementCounter() { setState(() { _counter++; }); } ​ このとき setState というメソッドが気になったかと思います。 これは Flutter が用意してくれているメソッドで、画面を再読み込みさせるメソッドです。 つまり最初は０だった_counter 変数を１にインクリメントした後に再読み込みさせるのです。 こうすることで画面上には１が表示されることになります。 ​ ボタンを押下する度にこの動作を繰り返すことで 2.3.4\u0026hellip;と画面上の数字が増加していく仕組みになっています。 ​\nまとめ 今回は Widget という言葉の説明と UI の構成、サンプルコードがどのような動きをしているのかを簡単に解説しました。 どうやって数字が増えていくのかの大まかな仕組みがわかっていただけたと思います。 ​ ややこしくしないためにあえて説明を省いたり、言葉を変更している箇所も多いので、もっと詳しく知りたい方は Flutter の公式サイトを見てみてください。 ​ サンプルコードが理解できたら、ウィジェットを追加したり変更を加えたりしながら学んでみてください！ ​ それでは！\n","permalink":"https://pedantic-brattain-b2caa7.netlify.app/blog/flutter-1/","tags":null,"title":"Flutterチュートリアル 1"}]